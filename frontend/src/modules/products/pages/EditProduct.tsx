"use client";

import { useEffect, useState } from "react";
import { Container, Form, Row, Col, Image, Button, Spinner } from "react-bootstrap";
import { useRouter } from "next/navigation";
import { ProductsService } from "../services/products.service";
import { UpdateProductDto } from "../types/products.types";

interface EditProductProps {
    id: string;
}

const EditProduct = ({ id }: EditProductProps) => {
    const router = useRouter();
    const [product, setProduct] = useState<UpdateProductDto | null>(null);
    const [loading, setLoading] = useState(true);
    const [uploading, setUploading] = useState(false);

    // üñºÔ∏è ·∫¢nh s·∫£n ph·∫©m
    const [thumbnail, setThumbnail] = useState<File | null>(null);
    const [gallery, setGallery] = useState<File[]>([]);
    const [removedImages, setRemovedImages] = useState<string[]>([]);

    // ‚úÖ L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m theo ID
    useEffect(() => {
        const fetchProduct = async () => {
            try {
                console.log("üìå ƒêang t·∫£i s·∫£n ph·∫©m v·ªõi ID:", id);
                const data = await ProductsService.getById(id);
                setProduct(data);
                console.log("‚úÖ D·ªØ li·ªáu s·∫£n ph·∫©m:", data);
            } catch (error) {
                console.error("‚ùå L·ªói khi t·∫£i s·∫£n ph·∫©m:", error);
                alert("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!");
                router.push("/admin/products");
            } finally {
                setLoading(false);
            }
        };
        if (id) {
            fetchProduct();
        }
    }, [id, router]);

    // ‚úÖ X·ª≠ l√Ω ch·ªçn ·∫£nh ƒë·∫°i di·ªán m·ªõi
    const handleThumbnailChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files && event.target.files[0]) {
            setThumbnail(event.target.files[0]);
        }
    };

    // ‚úÖ X·ª≠ l√Ω ch·ªçn album ·∫£nh m·ªõi
    const handleGalleryChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        if (event.target.files) {
            setGallery(Array.from(event.target.files));
        }
    };

    // ‚úÖ X√≥a ·∫£nh kh·ªèi album
    const handleRemoveImage = (imageUrl: string) => {
        setRemovedImages((prev) => [...prev, imageUrl]); // ƒê√°nh d·∫•u ·∫£nh c·∫ßn x√≥a
    };

    // ‚úÖ X·ª≠ l√Ω c·∫≠p nh·∫≠t s·∫£n ph·∫©m
    const handleUpdate = async () => {
        if (!product) return;

        try {
            setUploading(true);
            const updatedProduct: UpdateProductDto = { ...product };

            const formData = new FormData();
            formData.append("name", updatedProduct.name);
            formData.append("description", updatedProduct.description);
            formData.append("category", JSON.stringify(updatedProduct.category));
            formData.append("costPrice", updatedProduct.costPrice.toString());
            formData.append("originalPrice", updatedProduct.originalPrice.toString());
            formData.append("currentPrice", updatedProduct.currentPrice.toString());

            // ‚úÖ N·∫øu c√≥ ·∫£nh ƒë·∫°i di·ªán m·ªõi, th√™m v√†o formData
            if (thumbnail) {
                formData.append("thumbnail", thumbnail);
            }

            // ‚úÖ N·∫øu c√≥ ·∫£nh m·ªõi cho album, th√™m v√†o formData
            gallery.forEach((file) => {
                formData.append("gallery", file);
            });

            // ‚úÖ N·∫øu c√≥ ·∫£nh b·ªã x√≥a, g·ª≠i danh s√°ch ·∫£nh c·∫ßn x√≥a
            if (removedImages.length > 0) {
                formData.append("removedImages", JSON.stringify(removedImages));
            }

            // ‚úÖ G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t l√™n backend
            await ProductsService.update(id, formData);
            alert("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
            router.push("/admin/products");
        } catch (error) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", error);
            alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setUploading(false);
        }
    };

    if (loading) return <p className="text-center text-gray-500">‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>;
    if (!product) return <p className="text-center text-red-500">‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!</p>;

    return (
        <Container className="bg-white p-4 shadow-lg rounded-lg">
            <h2 className="mb-4">‚úèÔ∏è Ch·ªânh s·ª≠a S·∫£n Ph·∫©m</h2>
            <Form>
                <Row>
                    {/* üìù Nh·∫≠p t√™n s·∫£n ph·∫©m */}
                    <Col md={6}>
                        <Form.Group className="mb-3">
                            <Form.Label>T√™n s·∫£n ph·∫©m</Form.Label>
                            <Form.Control
                                type="text"
                                value={product.name}
                                onChange={(e) => setProduct({ ...product, name: e.target.value })}
                                required
                            />
                        </Form.Group>
                    </Col>

                    {/* üìù Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m */}
                    <Col md={6}>
                        <Form.Group className="mb-3">
                            <Form.Label>M√¥ t·∫£</Form.Label>
                            <Form.Control
                                as="textarea"
                                value={product.description}
                                onChange={(e) => setProduct({ ...product, description: e.target.value })}
                            />
                        </Form.Group>
                    </Col>
                </Row>

                <Row>
                    {/* üè∑Ô∏è Nh·∫≠p danh m·ª•c */}
                    <Col md={6}>
                        <Form.Group className="mb-3">
                            <Form.Label>Danh m·ª•c</Form.Label>
                            <Form.Control
                                type="text"
                                value={product.category.main}
                                onChange={(e) => setProduct({ ...product, category: { ...product.category, main: e.target.value } })}
                            />
                        </Form.Group>
                    </Col>
                </Row>

                {/* üñºÔ∏è Upload ·∫£nh */}
                <Row>
                    <Col md={6}>
                        <Form.Group className="mb-3">
                            <Form.Label>·∫¢nh ƒë·∫°i di·ªán</Form.Label>
                            <Form.Control type="file" onChange={handleThumbnailChange} accept="image/*" />
                            {product.imageUrls?.length > 0 && (
                                <Image src={`${process.env.NEXT_PUBLIC_API_URL}/uploads/${product.imageUrls[0]}`} alt="·∫¢nh ƒë·∫°i di·ªán" fluid rounded className="mt-2" />
                            )}
                        </Form.Group>
                    </Col>

                    <Col md={6}>
                        <Form.Group className="mb-3">
                            <Form.Label>Album ·∫£nh</Form.Label>
                            <Form.Control type="file" multiple onChange={handleGalleryChange} accept="image/*" />
                            {product.gallery?.length > 0 && (
                                <Row className="mt-3">
                                    {product.gallery.map((url, index) => (
                                        <Col key={index} xs={3}>
                                            <Image src={`${process.env.NEXT_PUBLIC_API_URL}/uploads/${url}`} alt={`H√¨nh ${index + 1}`} fluid rounded />
                                            <Button variant="danger" size="sm" onClick={() => handleRemoveImage(url)} className="mt-2">X√≥a</Button>
                                        </Col>
                                    ))}
                                </Row>
                            )}
                        </Form.Group>
                    </Col>
                </Row>

                {/* üìå N√∫t c·∫≠p nh·∫≠t & Quay l·∫°i */}
                <Row className="mt-3">
                    <Col md={6}>
                        <Button onClick={handleUpdate} disabled={uploading} variant="primary" className="w-100">
                            {uploading ? <Spinner animation="border" size="sm" /> : "L∆∞u thay ƒë·ªïi"}
                        </Button>
                    </Col>
                    <Col md={6}>
                        <Button onClick={() => router.push("/admin/products")} variant="secondary" className="w-100">
                            ‚¨Ö Quay l·∫°i
                        </Button>
                    </Col>
                </Row>
            </Form>
        </Container>
    );
};

export default EditProduct;
