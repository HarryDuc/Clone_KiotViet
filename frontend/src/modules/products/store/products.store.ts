import { create } from "zustand";
import { ProductsService } from "../services/product.service";
import { Product, CreateProductDto, UpdateProductDto } from "../types/product.type";

interface ProductsState {
    products: Product[];
    fetchProducts: () => Promise<void>;
    addProduct: (product: CreateProductDto, files: File[]) => Promise<void>;
    updateProduct: (id: string, product: UpdateProductDto, files?: File[], removedImages?: string[]) => Promise<void>;
    removeProduct: (id: string) => Promise<void>;
}

export const useProductsStore = create<ProductsState>((set) => ({
    products: [],

    /**
     * üìå L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ backend
     */
    fetchProducts: async () => {
        try {
            const products = await ProductsService.getAll();
            set({ products });
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m:", error);
        }
    },

    /**
     * üìå Th√™m s·∫£n ph·∫©m m·ªõi
     * ‚úÖ Upload ·∫£nh tr∆∞·ªõc khi g·ª≠i d·ªØ li·ªáu l√™n backend
     */
    addProduct: async (product, files) => {
        try {
            const createdProduct = await ProductsService.create(product);
            set((state) => ({ products: [...state.products, createdProduct] }));
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);
        }
    },

    /**
     * üìå C·∫≠p nh·∫≠t s·∫£n ph·∫©m theo ID
     * ‚úÖ N·∫øu c√≥ ·∫£nh m·ªõi, s·∫Ω upload v√† c·∫≠p nh·∫≠t
     * ‚úÖ N·∫øu c√≥ ·∫£nh b·ªã x√≥a, s·∫Ω lo·∫°i b·ªè kh·ªèi `gallery`
     */
    updateProduct: async (id, product, files, removedImages) => {
        try {
            const updatedProduct = await ProductsService.update(id, product, files, removedImages);
            set((state) => ({
                products: state.products.map((p) => (p._id === id ? updatedProduct : p)),
            }));
        } catch (error) {
            console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m ID ${id}:`, error);
        }
    },

    /**
     * üìå X√≥a s·∫£n ph·∫©m theo ID
     */
    removeProduct: async (id) => {
        try {
            await ProductsService.delete(id);
            set((state) => ({ products: state.products.filter((p) => p._id !== id) }));
        } catch (error) {
            console.error(`‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m ID ${id}:`, error);
        }
    },
}));
